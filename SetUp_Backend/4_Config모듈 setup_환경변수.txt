환경변수
- dotenv: .env 파일의 환경변수들에 접근하는 일반적인 방법. node.js 방식.
- @nestjs/config: dotenv 위에서 동작함. nest.js 방식으로 dotenv를 구동. ConfigModule.

=======================================================================
1) npm i --save @nestjs/config
   npm i cross-env  // 윈도우,맥,리눅스 등 상관없이 가상 변수 사용 가능하도록 해주는 패키지.

======================================================
2) 개발,테스팅,배포 단계별로 환경변수 파일들 구분. 
.env.dev
.env.test
.env.prod

2-1) 해당 .env 파일들은 각각 .gitignore에 추가

=======================================================================
=======================================================================
[핵심 원리] 
3) cross-env : 실행하는 명령어에 따라 NODE_ENV에 다른 값 대입.
4) envFilePath 옵션: process.env.NODE_ENV의 값에 따라 다른 파일에서 환경변수들 찾아오도록. 
5) process.env.환경변수KEY를 통해 접근 가능해짐. (주의. 전부 문자열. 타입 변경 필요할 수 있음.)

======================================================
3) 명령어에 따라 다른 .env 파일 실행하도록 명령어 수정.
"start": "cross-env NODE_ENV=prod nest start",
"start:dev": "cross-env NODE_ENV=dev nest start --watch",
  // cross-env NODE_ENV=~~ 부분 추가됨. NODE_ENV 대신 다른 변수명 사용 가능.
  // 변수명 prod & dev는 app.module.ts의 옵션들에서 활용.

======================================================
4) AppModule에 ConfigModule 연결. 
- envFilePath 옵션 : 환경변수들을 가져올 파일의 경로. 

[app.module.ts]
import { ConfigModule } from '@nestjs/config'; 

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true, // app 어디서든 config 모듈에 접근 가능.
      envFilePath: process.env.NODE_ENV === 'dev' ? '.env.dev' : '.env.test', // boolean
     // process.env.NODE_ENV은 환경변수들의 경로. 변수명 NODE_ENV은 package.json의 명령어에 대응되도록.
      // NODE_ENV=dev로 실행했으면 참이므로 .env.dev 사용. 그 외의 경우 거짓이므로 .env.test 사용.
    }),

======================================================
4-1) ignoreEnvFile 옵션 : 서버에 배포할 때 환경변수 파일들 사용하지 않도록 설정.

@Module({
  imports: [
    ConfigModule.forRoot({
      ~~~
      ignoreEnvFile: process.env.NODE_ENV === 'prod', 
      // 참이면 ConfigModule은 환경변수 파일 무시. 다른 방법으로 환경변수들 얻게 됨.
      // NODE_ENV=prod로 실행했을 때만 ignoreEnvFile 옵션이 참이 되도록.
    }),

======================================================
5) .env.dev 파일로 환경변수들 이동.
- npm run start:dev 실행시, ["start:dev": "cross-env NODE_ENV=dev nest start --watch"]가 실행됨
- NODE_ENV=dev이므로 .env.dev 파일의 환경변수들이 process.env에 담기게 됨.
- cf) .env의 환경변수들은 전부 string 타입. +를 붙여서 number 타입으로 변환 필요.

[.env.dev]
DB_HOST=172.20.112.1
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=12345
DB_NAME=uber-eats

[app.module.ts]
@Module({
  imports: [
    ConfigModule.forRoot({
      ~
      envFilePath: process.env.NODE_ENV === 'dev' ? '.env.dev' : '.env.test',
      ~
    }),
    TypeOrmModule.forRoot({
      ~~
      host: process.env.DB_HOST,    // cmd > [ipconfig] > Ethernet adapter vEthernet (WSL):의 IPv4 주소. (컴퓨터 재시작할 때마다 수정 필요)
      port: +process.env.DB_PORT,   // .env의 환경변수들은 전부 string 타입. +를 붙여서 number로
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD,  // localhost로 접근할 때는 불필요.
      database: process.env.DB_NAME,
      ~~
    }), 

======================================================
