joi : JS에서 가장 강력한 data validator & 스키마 description 언어.
- 환경변수의 유효성 검증 등에 활용 가능.

> npm i joi

import * as Joi from 'joi';  // TS 및 NestJS로 export 되어있지 않은 패키지 import 방법
// 비교) import Joi from 'joi'; // undefined

=======================================================================
[app.module.ts]
import * as Joi from 'joi'; // import 형식 주의. 

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,                    // app 어디서든 ConfigModule에 접근 가능. => import 불필요.
      envFilePath: process.env.NODE_ENV === 'dev' ? '.env.dev' : '.env.test', // boolean
      ignoreEnvFile: process.env.NODE_ENV === 'production', // 참이면 ConfigModule은 환경변수 파일 무시. 다른 방법으로 환경변수들 얻게 됨.      
      validationSchema: Joi.object({
        NODE_ENV: Joi.string().valid('dev', 'production', 'test').required(), // NODE_ENV의 값은 dev, production, test만 가능하도록 지정. Jest 자체 디폴트 값은 NODE_ENV=test
        DB_HOST: Joi.string().required(), // DB_HOST는 문자열이어야 하며 존재해야만 함.
        DB_PORT: Joi.string().required(), // Config Object Validation
        DB_USERNAME: Joi.string().required(),
        DB_PASSWORD: Joi.string().required(),
        DB_NAME: Joi.string().required(),
        TOKEN_SECRET: Joi.string().required(),
        MAILGUN_APIKEY: Joi.string().required(),
        MAILGUN_DOMAIN_NAME: Joi.string().required(),
        MAILGUN_FROM_EMAIL: Joi.string().required(),
      }),
    }),
    TypeOrmModule.forRoot({ ~~ }),
    GraphQLModule.forRoot({ ~~ }),
    // ~~
  ]
})
=======================================================================