Docker: 2013년에 등장한 컨테이너 기반 가상화 도구. 컨테이너 관리 도구.
        컨테이너 서비스 중 업계 표준이 된 일인자.

컨테이너: 리눅스 커널의 기능을 활용해 프로세스를 격리된 환경에서 실행하는 것.
          프로그램을 빌드/실행할 때 그 어떤 기기에서든 똑같은 환경을 조성할 수 있도록 도와주는 패키징 서비스
=> 도커는 애플리케이션 배포부터 개발 환경 구성에 사용될 뿐만 아니라, 
   미리 만들어진 이미지를 활용하기도 좋아서 개발자가 아닌 분들도 사용하곤 함.

개념 이해: https://www.youtube.com/watch?v=chnCcGCTyBg
- environment disparity를 해결해줌. Linux vs Windows 등.
- WSL2 사용하는 경우 거의 필수. WSL2를 고려하고 있는 프로그램.

----------------------------------------
설치: Docker Desktop for Windows
- 윈도우측에 설치
- https://hub.docker.com/editions/community/docker-ce-desktop-windows

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
(연습) WSL2에서 도커 데스크탑으로 Nginx 서버 실행하기
https://www.44bits.io/ko/post/wsl2-install-and-basic-usage#wsl2%EC%97%90%EC%84%9C-%EC%9A%B0%EB%B6%84%ED%88%ACubuntu-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0

- docker desktop > settings > WSL Integration

> docker ps   // docker 현재 실행 여부 확인 방법

> ip addr show eth0        // WSL2 우분투의 IP 주소 확인 방법 
4: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:15:5d:98:6e:58 brd ff:ff:ff:ff:ff:ff
    inet 172.24.160.76/20 brd 172.24.175.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::215:5dff:fe98:6e58/64 scope link
       valid_lft forever preferred_lft forever
// => 현재 IP 주소: 172.24.160.76 (주의: 재부팅시 변경됨)

> docker run -it -p 80:80 nginx:latest
// 구글 크롬에서 172.24.160.76로 접속하면 서버 구동 확인 가능.  
// 호스트 머신에서는 127.0.0.1로 접속해도 같은 서버에 접속이 됨

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

도커 입문: https://www.44bits.io/ko/post/easy-deploy-with-docker

[이미지]: 어떤 애플리케이션을 실행하기 위한 환경, 파일들의 집합.
- "어떤 환경이 구성되어있는 상태를 저장해놓은 파일 집합"
- 도커에서는 애플리케이션을 실행하기 위한 파일들을 모아놓고, 
  애플리케이션과 함께 직접 이미지로 만들 수 있습니다. 
  그리고 이 이미지를 기반으로 애플리케이션을 바로 배포할 수 있습니다.
- pull : 이미지 다운로드
- push : 이미지 업로드
- commit : 새로운 이미지 생성
- diff : 이미지의 차이 확인
- 도커 허브에서 이미지들 확인 가능: https://hub.docker.com/

[docker images]
- Repository: 도커에서는 하나의 이미지를 저장소(repository)라고 부름
- TAG: 임의로 붙여진 추가적인 이름 - 일반적으로 이미지의 버저닝을 하기 위해서 사용됨
- IMAGE ID: 이미지를 가리키는 고유한 해시 값
- CREATED: 이미지가 생성된 시간
- SIZE는 이미지의 용량

------------------------------

[컨테이너]: 독립된/격리된 환경에서 실행되는 프로세스.
- 컨테이너는 파일들의 집합(=이미지) 위에서 실행된 특별한 프로세스.
- 컨테이너의 역할: 특정 이미지 위에서 미리 규정된 명령어를 실행하는 일. 
cf) 보통 이미지들은 해당 애플리케이션을 실행하는 스크립트가 기본 명령어로 지정되어 있음.
  -> 해당 명령어가 종료되면 컨테이너도 종료 상태(Exit)에 들어가게 됨. 
     죽은 컨테이너의 목록 확인 방법: docker ps -a 
- 컨테이너는 가상머신이 아니라 프로세스. 격리된 프로세스(중요)
- docker run ~ : 특정 컨테이너 실행

[docker ps] 현재 실행중인 모든 컨테이너 목록 출력
CONTAINER ID     IMAGE        COMMAND   ~~    NAMES
d3fef9c0f9e9  centos:latest   "bash"       sweet_keldysh
- CONTAINER ID: 도커에서 컨테이너를 조작할 때 사용하는 아이디 (중요)
- NAMES: 임의로 붙여진 컨테이너의 이름. (마찬가지로 컨테이너를 조작할 때 사용 가능)
  - docker run을 할 때 --name 옵션으로 명시적으로 지정 가능 (지정하지 않으면 임의의 이름이 자동적으로 부여됨)

------------------------------

[도커와 버전 관리 시스템]
- 컨테이너에서 무슨 짓을 해도 이미지에는 아무런 변화도 생기지 않음.
  - 이미지는 불변Immutable한 저장 매체
- 이미지를 기반으로 만들어진 컨테이너는 변경 가능
  - 특정한 이미지로부터 생성된 컨테이너에 어떤 변경사항을 더하고(파일들을 변경하고), 
    이 변경된 상태를 새로운 이미지로 만들어내는 것이 가능

- docker commit <CONTAINER ID> <REPOSITORY>:<TAG>
  - 새로운 도커 이미지 생성 방법. 뒤에 이미지명 추가
- docker diff <CONTAINER ID> | head
  - head로 앞부분만 출력 (A는 ADD, C는 Change, D는 Delete를 의미)

- docker rm <CONTAINER ID> : 컨테이너를 삭제하는 명령어
- docker rmi <이미지명>:<tag> : 이미지를 삭제하는 명령어 
  - 이미지에서 파생된 컨테이너가 하나라도 남아있다면 이미지는 삭제할 수 없음 (종료 상태를 포함)
  - 먼저 컨테이너를 종료하고, 삭제까지 해주어야함
