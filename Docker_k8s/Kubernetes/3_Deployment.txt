Deployment
- Pod 배포를 위해서 RC를 생성하고 관리하는 역할을 하며, 
  롤백을 위한 기존 버전의 RC 관리 등 여러가지 기능을 포괄적으로 포함함. 
- Replication controller와 Replica Set의 상위 추상화 개념으로 
  실제 운영에서는 RS나 RC를 직접 사용하지 않고 더 추상화된 Deployment를 사용함.

=================================================================================
[쿠버네티스 배포에 대한 이해]

애플리케이션 업데이트 과정 예시
- 새로운 버전의 컨테이너를 굽고, 그 컨테이너를 배포하는 경우
  일반적으로 블루/그린 배포 & 롤링 업데이트 방식 중 하나를 사용.

======================================
1) 블루/그린 배포 : 새로운 RC로 모든 Pod들 새로 생성하고 Service가 가리키도록 설정.
- 블루(예전) 버전으로 서비스 하고 있던 시스템을 그린(새로운)버전으로 배포한 이후 
  트래픽을 블루에서 그린으로 한번에 돌리는 방식이다.

- 가장 쉬운 방법으로는 새로운 Pod 템플릿을 사용하는 새로운 RC을 만들어서 
  새로운 Pod들을 전부 생성하고, Service를 새로운 Pod들로 옮기는 방식.
- 배포가 완료되고 문제가 없으면 예전 버전의 RC와 Pod들은 전부 제거.

======================================
2) 롤링 업그레이드: 개별 Pod를 하나씩 순차적으로 업그레이드하는 방식. 

<롤링 업그레이드 과정>
- 새로운 RC 생성
- 기존 RC의 replica 수는 하나 줄이고, 새로운 RC의 replica 수를 1로 설정.
- 새로운 RC에 의해 생성되는 Pod는 Service에 자동 포함되도록 같은 라벨명을 설정.
=> 기존 버전의 Pod 중 하나는 Service에서 제외됨. 
   새로운 RC에 의해 생성된 새로운 Pod가 Service에 자동 포함.
- 기존 RC의 replica를 하나 더 줄이고, 새로운 RC의 replica 수는 2로 설정.
=> 기존 버전의 Pod 중 하나는 Service에서 제외됨. 
   새로운 RC에 의해 생성된 새로운 Pod가 Service에 자동 포함.
(반복)
- 결과적으로 예전 버전의 Pod는 Service에서 모두 제외되고,
  새로운 RC에 의해 생성된 새로운 Pod들만 Service에 포함.

======================================
<롤백 원리>
배포가 잘못된 경우 기존 RC의 replica 수를 원래대로 증가시키고, 
새로운 RC의 replica 수를 0으로 만들면 예전 버전의 Pod로 롤백 가능. 
- kubectl rolling-update라는 명령으로 RC 단위로 컨트롤이 가능함. 

<문제점>
- 수작업 필요
- 배포 과정을 직접 모니터링해줘야 함. 
- kubectl rolling-update 명령은 클라이언트에서 실행하는 명령이므로 
  명령어 실행 중에 클라이언트의 연결이 끊어지면 배포 작업이 비정상적으로 끊어질 수 있음.
- 롤백 과정에서 수동 컨트롤이 필요할 수 있음.

==> 이러한 과정을 자동화하고 추상화한 개념이 바로 Deployment

=================================================================================
