Pod
- 쿠버네티스에서 가장 기본적인 배포 단위로, 컨테이너를 포함하는 단위.
- 하나의 Pod에 하나 이상의 컨테이너가 포함됨.
- 쿠버네티스는 개별 컨테이너를 하나씩 배포하는 것이 아니라 Pod 단위로 배포함.

=================================================================================
[Pod를 정의한 오브젝트 스펙 예시]

apiVersion: v1  // 이 스크립트를 실행하기 위한 쿠버네티스 API 버전. 보통 v1을 사용.
kind: Pod       // kind: 정의하려는 리소스의 종류.
metadata:       // 라벨, 리소스의 이름 등 해당 리소스의 각종 metadata 
  name: nginx   
spec:           // 리소스에 대한 상세한 스펙 정의
  containers:   // Pod는 컨테이너를 지니므로 container를 정의
  - name: nginx             // Pod명은 nginx
    image: nginx:1.7.9      // 도커 이미지 nginx:1.7.9를 사용  
    ports:
  - containerPort: 8090     // 컨테이너 포트 8090을 오픈하도록 설정

=================================================================================
컨테이너들을 개별적으로 배포하지 않고 Pod 단위로 묶어서 배포하는 이유
: IP주소와 디스크 볼륨을 공유하므로 컨테이너 간 상호작용 용이.

[Pod의 특성] 
1) Pod 내의 컨테이너들은 IP 주소를 공유. 배포된 Port 번호로 서로 통신 가능. 
- 하나의 Pod를 통해서 배포된 두 개의 컨테이너는 localhost를 통해서 통신이 가능함.
- 컨테이너 A가 8080, 컨테이너 B가 7001로 배포가 된 경우, 
  B에서 A를 호출할때는 localhost:8080으로 호출하면 되고, 
  반대로 A에서 B를 호출할때에는 localhost:7001로 호출하면 된다. 

2) Pod 내에 배포된 컨테이너들끼리 Pod 내에 있는 디스크 Volume들을 서로 공유 가능. 
- 근래 애플리케이션들은 실행할때 애플리케이션만 올라가는것이 아니라 
  Reverse proxy, 로그 수집기 등 다양한 주변 솔루션이 함께 배포되는 경우가 많음. 
  특히 로그 수집기의 경우에는 애플리케이션 로그 파일을 읽어서 수집함. 
- 애플리케이션(Tomcat, node.js)와 로그 수집기를 다른 컨테이너로 배포할 경우,  
  일반적인 경우에는 컨테이너에 의해서 파일 시스템이 분리되므로 
  로그 수집기가 애플리케이션이 배포된 컨테이너의 로그파일을 읽는 것은 불가능. 
- 쿠버네티스의 경우 하나의 Pod 내에서 컨테이너들끼리 볼륨을 공유할 수 있기 때문에 
  로그 수집기에서 다른 컨테이너의 로그 파일을 읽어오는 것도 가능. 

cf) 사이드카 패턴(Side car pattern)
: MSA에서 애플리케이션과 애플리케이션에서 사용하는 주변 프로그램을 같이 배포하는 패턴

=================================================================================
