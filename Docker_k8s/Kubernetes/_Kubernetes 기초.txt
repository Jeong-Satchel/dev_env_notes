Kubernetes : 컨테이너를 운용하기 위한 컨테이너 운영 환경을 제공해줌
           : 컨테이너 운영환경중 가장 널리 사용되는 솔루션

구글의 내부 컨테이너 서비스(Borg)의 구조를 오픈소스화한것이 쿠버네티스.
- 구글은 내부 서비스를 클라우드 환경에서 운영하고 있음, 즉 컨테이너 환경을 사용해왔음.
- GO 언어로 구현됨.

- 벤더나 플랫폼에 종속되지 않기 때문에, 
  대부분의 퍼블릭 클라우드 (구글,아마존,애저)등에 사용 가능.

- 오픈 스택과 같은 프라이빗 클라우드 구축 환경이나 또는 베어메탈 
  (가상화 환경을 사용하지 않는 일반 서버 하드웨어)에도 배포가 가능함.

- 이런 이유 때문에 여러 퍼블릭 클라우드를 섞어서 사용하는 환경이나 
  온프렘/퍼블릭 클라우드를 혼용해서 쓰는 환경에도 동일하게 적용이 가능
  => 하이브리드 클라우드 솔루션으로 많이 각광 받고 있음.

- k8s는 도커, rkt, Hyper container 등 다양한 컨테이너 엔진을 모두 지원해줌. 
- 도커가 컨테이너 엔진의 대표격이기는 함.

=================================================================================
[컨테이너 운영환경]
스케쥴링, 컨테이너가 정상적으로 작동하고 있는지 체크하고 문제가 있으면 재기동,
모니터링, 삭제관리 등 컨테이너에 대한 종합적인 관리를 해주는 환경

=================================================================================
도커 컨테이너를 하드웨어나 VM에 직접 배포하지 않고 k8s를 사용하는 경우
- 적은 수의 컨테이너라면 수동으로 VM이나 하드웨어에 직접 배포해도 무관
- 다만, VM이나 하드웨어의 수가 많아지고 컨테이너의 수가 많아지면, 
  개별 컨테이너를 각각 어디에 배포해야 하는지에 대한 결정이 필요 => 컨테이너 운영 환경 필요

ex. 16 CPU, 32 GB 메모리 머신들에 컨테이너를 배포할때 
각 컨테이너들의 사이즈는 2 CPU, 3 CPU, 8 CPU등 다양할 수 있음. 
자원을 최대한 최적으로 사용하기 위해서 적절한 위치에 배포해야 하고,
애플리케이션 특성들에 따라 같은 물리 서버에 배포가 되어야 하거나 
또는 가용성을 위해서 일부러 다른 물리서버에 배포되어야 하는 일도 있음. 

cf) 스케줄링 : 이처럼 컨테이너를 적절한 서버에 배포해주는 역할
 
=================================================================================
컨테이너 환경을 왜 VM에 올리는가?
- 하드웨어 자원 활용의 효율성. 
- 스토리지 자원의 활용 용이성.
- 노드 확장등을 유연하게 할 수 있는 장점. 

온프렘 환경(데이타센터)에서 쿠버네티스를 올릴때 
바로 베어메탈 머신위에 쿠버네티스를 깔아도 되지만, 
일반적으로 VM(가상화 환경)을 올린 후에 그 위에 쿠버네티스를 배포하는 구조를 갖는다. 

컨테이너 환경은 말그대로 하드웨어 자원을 컨테이너화하여 isolation 하는 기능이 핵심.

그에 반해 가상화 환경은 isolation 기능도 가지고 있지만, 
가상화를 통해서 자원, 특히 CPU의 수를 늘릴 수 있다. 

예를 들어, 8 CPU 머신을 쿠버네티스로 관리 운영하면
8 CPU로밖에 사용할 수 없지만, 가상화 환경을 중간에 끼면, 
8 CPU를 가상화 해서 2배일 경우 16 CPU로, 
8배일 경우 64 CPU로 가상화 하여 좀 더 자원을 잘게 나눠서 사용이 가능하기 때문

=================================================================================
