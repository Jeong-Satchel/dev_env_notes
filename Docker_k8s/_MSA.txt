Micro-service architecture
- 비지니스 기능마다 애플리케이션 서버와 DB 서버를 분리하는 방식.
- 개별 서비스를 각각 별도의 애플리케이션으로 나누고 DB도 각각 나누는 방식.  
 
=================================================================================
cf) 전통적인 아키텍쳐 스타일: 모노리틱 아키텍쳐
- 애플리케이션이 하나의 서버에 배포되고, 
  DB도 마찬가지로 하나의 DB에 모든 데이터를 저장하는 방식.
 
하나의 큰 서버를 놓고 그 안에 하나의 애플리케이션으로 개발하는 방식
- 수퍼돔과 같이 큰 머신을 하나 놓고 
- 오라클 DB에 모든 데이타를 저장하고
- 애플리케이션 바이너리를 하나로 개발

장점: 중앙 관리된 구조에서 통제가 편리하고, 같은 솔루션을 사용함

=================================================================================
서버를 분할하는 이유
1) 서비스를 개발하는 조직이 다른 경우, 각 조직에 서비스 기획, 개발, 운영에 대한 독립적인 권한을 부여하여, 
   각 서비스 개발을 할때 다른 서비스에 대한 의존성 없이 빠르게 개발 가능.
=> 개발 속도 증가
=> 서비스별로 다른 기술 사용 가능, 즉 서비스의 특성에 따라서 적절한 기술 사용 가능.

2) 과거에는 수억의 고성능 서버에 하나의 애플리케이션을 넣는 방식을 이용했지만, 
   근래에는 x86 서버기반으로 상대적으로 저비용, 저성능 서버를 더 많이 사용하게 됨. 
=> 하나의 큰 애플리케이션을 만드는 것보다 작은 애플리케이션으로 나눠서 여러 서버에 분산하는 것이 유리해짐.

단점
1) 여러가지 기술을 혼용해서 사용하는 경우, 기술의 표준을 통제하기가 어려움.
   희귀한 기술로 개발을 진행한 서비스가 있을때 개발자가 팀을 떠나게 되면, 해당 서비스를 계속해서 유지하기 어려울 수 있음. 
   같은 기술을 사용하더라도 프레임워크나 코드 표준화 개발 프로세스 표준화 등에서 어려움을 겪을 수 있음.
2) 서비스가 증가될수록 서비스간의 연계가 복잡해져서 
   장애가 발생했을때 어느 서비스에서 장애가 발생했는지 찾아서 조치하는 것이 어려워짐. 
   분산된 서비스간의 모니터링을 구현하는데 더 많은 노력을 기울여야 함. 

=================================================================================
